/* ----- < 딥러닝이란? > ----- */

/*
딥러닝은 인공 신경망( artificial neural network )을 기반으로 한 머신러닝의 한 분야
이는 인간의 뇌 신경망을 모방한 구조를 사용하여 데이터에서 의미 있는 패턴을 학습하고 이해하는 데 사용된다. 
딥러닝은 대량의 데이터와 그 데이터에 내재된 복잡한 관계를 이해하고 예측하는 데 특히 유용하며, 
이미지 인식, 음성 인식, 자연어 처리 등 다양한 분야에서 매우 성공적으로 활용되고 있다.

딥러닝은 여러 개의 층( layer )으로 구성된 신경망을 사용하는데, 
이런 구조 때문에 "깊은" 학습을 할 수 있어서 딥러닝이라는 이름이 붙여졌다. 
각 층은 입력 데이터에서 점차적으로 추상적인 특징을 학습하며, 
이러한 층들은 서로 연결되어 복잡한 패턴과 관계를 모델링할 수 있다.

딥러닝의 주요 구성 요소는 다음과 같다.
	입력층( Input Layer )	: 초기 데이터가 들어오는 곳
	은닉층( Hidden Layers )	: 여러 개의 은닉층이 있으며, 데이터의 추상적인 특징을 학습
	출력층( Output Layer )	: 최종 예측이나 분류 결과를 출력
	가중치( Weights )와 편향( Biases )	: 각 층 사이의 연결은 가중치와 편향으로 구성되며, 이들은 학습 과정에서 조절된다.
	활성화 함수( Activation Functions )	: 각 층의 출력을 결정하는 함수로, 비선형성을 추가하여 복잡한 관계를 모델링할 수 있게 해준다.
	역전파( Backpropagation )			: 학습 데이터와 실제 결과 사이의 오차를 줄이기 위해 가중치와 편향을 조절하는 과정

딥러닝은 주로 데이터를 기반으로 자동으로 특징을 학습하므로, 전통적인 방식보다 효과적으로 많은 문제를 해결할 수 있다. 
하지만 많은 데이터와 연산 자원이 필요하며, 모델의 복잡성이 증가할수록 과적합(overfitting) 문제에 주의해야 한다.
*/

/* ----- < Perceptron과 뉴럴 네트워크 > ----- */

/* Perceptron */

/*
딥러닝의 가장 작은 단위 Perceptron

퍼셉트론은 딥러닝의 기본 개념 중 하나로, 간단한 형태의 인공 신경망 구조를 말한다.

고양이와 개를 구분하려고 한다고 해보자.
각 동물의 특징을 살펴보고, 귀의 크기나 코의 형태 등을 관찰하여 이들을 구분하는 방법을 찾고 있다. 
퍼셉트론은 이런 아이디어를 컴퓨터가 이해할 수 있는 방식으로 구현한 것이다.

퍼셉트론은 두 개의 주요 구성 요소로 이루어져 있다. 
하나는 "입력"이고 다른 하나는 "가중치"이다.
	입력( Input ) : 고양이와 개를 구분하기 위해 두 가지 특징을 사용하기로 결정했다고 가정하면
			=> 하나는 "귀의 크기"이고 다른 하나는 "코의 형태"에 대한 정보이다. 
			=> 각각의 특징을 숫자로 표현하자면, 귀의 크기가 0.7이고 코의 형태가 0.5라고 해보자. 이것이 바로 퍼셉트론의 입력이다.
	가중치( Weights ) : 그런데 귀의 크기가 중요한 특징일 수도 있고, 코의 형태가 더 중요한 특징일 수도 있다. 
			=> 이러한 특징의 중요도를 나타내는 숫자를 가중치라고 한다. 
			=> 예를 들어, 귀의 크기가 중요하다고 판단하면 그 가중치를 0.6으로, 
			=> 코의 형태가 더 중요하다고 판단하면 그 가중치를 0.9로 설정해볼 수 있다.

퍼셉트론은 이렇게 입력과 가중치를 곱한 값을 합산하고, 그 결과를 활성화 함수를 통해 변환한다. 
	=> 활성화 함수는 단순히 입력을 더 복잡한 형태로 바꾸어주는 역할도 한다.
마지막으로, 활성화 함수를 거친 결과가 어떤 임계값을 넘으면 퍼셉트론은 출력을 내보낸다. 
	=> 이 출력은 "고양이"일 확률을 나타내는 값이나 "개"일 확률을 나타내는 값일 수 있다.

요약하자면, 퍼셉트론( Perceptron )은 입력과 가중치를 곱하고 활성화 함수를 거쳐서 출력을 생성하는 단순한 구조로, 
이를 통해 간단한 판단을 컴퓨터가 할 수 있게 된다. 이것이 딥러닝의 시작이자 기본 개념이다.
*/

/* Neuron */

/*
뉴런( neuron )은 생물학적 뉴런을 모델로 한 인공 신경망의 기본 단위를 의미한다. 
인공 신경망은 인간의 뇌에서 영감을 받아 만들어진 모델로, 데이터를 처리하고 패턴을 학습하는 데 사용된다. 
인공 뉴런은 생물학적 뉴런의 기본 작동 원리를 모방하여 만들어진 것으로, 
입력을 받아 가중치와 함께 가공하고 활성화 함수를 통해 출력을 생성하는 역할을 수행한다.

인공 뉴런의 구조와 작동 방식
	입력( Input ) : 인공 뉴런은 여러 개의 입력을 받을 수 있다. 
		=> 예를 들어, 이미지 데이터의 경우 각 픽셀의 값을 입력으로 사용할 수 있다.
	가중치( Weights ) : 각 입력에는 가중치가 할당된다. 
		=> 가중치는 해당 입력의 중요도를 나타내는 값으로, 입력과 가중치를 곱한 값들이 뉴런 내에서 계산된다.
	합산( Summation ) : 입력과 가중치를 곱한 값들을 합산하여 하나의 숫자로 만든다. 
		=> 이 합산된 값은 뉴런의 활성화 함수에 입력으로 들어가게 된다.
	활성화 함수( Activation Function ) : 활성화 함수는 합산된 값을 변환하여 출력을 생성한다. 
		=> 이 함수는 비선형성을 추가해 복잡한 패턴을 모델링할 수 있도록 돕는다.
	출력( Output ) : 활성화 함수를 거친 결과가 뉴런의 출력이 된다. 
		=> 이 출력은 다음 뉴런으로 전달되거나 최종 결과를 내놓는 데 사용된다.

딥러닝에서 여러 개의 인공 뉴런을 결합하여 층(layer)을 형성하고, 
이러한 층들을 서로 연결함으로써 복잡한 패턴을 학습하고 데이터를 처리한다. 
이러한 구조를 딥러닝 모델이라고 하며, 이를 통해 이미지, 음성, 텍스트 등 
다양한 데이터에서 유용한 정보를 추출하거나 예측하는 작업을 수행할 수 있다.
*/

/* Neural Network Structure */

/*
딥러닝에서 말하는 "뉴럴 네트워크 구조( neural network structure )"는 인공 뉴런들을 계층적으로 배치하고 
연결하여 데이터 처리 및 학습을 수행하는 모델의 레이아웃과 구성을 의미한다. 
뉴럴 네트워크 구조는 인공 신경망의 구성요소들이 어떻게 배치되고 상호작용하는지를 나타내며, 
데이터의 복잡한 패턴을 이해하고 모델링하는 데 사용된다.

가장 기본적인 뉴럴 네트워크 구조는 "퍼셉트론( perceptron )"으로부터 시작한다. 
하지만 딥러닝에서 사용되는 구조는 이보다 훨씬 더 깊고 복잡한 형태를 가지며, 
다양한 종류의 층과 뉴런이 조합되어 데이터를 처리하고 학습하는 데 사용된다.

일반적으로 딥러닝에서 사용되는 뉴럴 네트워크 구조의 중요한 요소는 다음과 같다.
	입력층( Input Layer ) : 초기 데이터가 들어오는 곳으로, 실제 입력 데이터와 동일한 차원을 가지는 뉴런들로 구성된다.
	은닉층( Hidden Layers ): 하나 이상의 은닉층이 있을 수 있다. 
		=> 은닉층은 입력 데이터의 특징을 추출하고 학습을 위해 중간 단계에서 사용된다.
	출력층( Output Layer ) : 최종 예측이나 분류 결과를 내보내는 곳으로, 원하는 출력 형태에 따라 뉴런들로 구성된다.
	연결( Connectivity ) : 뉴런들 사이의 연결 구조를 나타내는 것이 중요하다. 
		=> 일반적으로 이전 층의 뉴런들이 다음 층의 모든 뉴런과 연결되어 정보가 전달된다.
	가중치( Weights )와 편향( Biases ) : 각 연결에는 가중치와 편향이 할당되며, 이들은 학습 과정에서 조절된다.
	활성화 함수( Activation Functions ) : 뉴런의 출력을 결정하는 함수로, 
		=> 비선형성을 추가하여 네트워크가 복잡한 함수를 모델링할 수 있게 한다.
	깊이( Depth ) : 딥러닝에서 "깊이"는 은닉층의 개수를 나타낸다. 
		=> "깊은( deep )" 학습이라는 용어는 여러 개의 은닉층을 사용하는 것을 의미한다.

뉴럴 네트워크 구조는 다양한 종류로 변형되어 다양한 문제에 적용될 수 있다. 
예를 들어, 컨볼루션 신경망(CNN)은 주로 이미지 처리에 사용되며, 
순환 신경망(RNN)은 순서가 있는 데이터(예: 시퀀스, 시계열)를 처리하는 데 사용된다. 
이러한 구조들을 조합하고 변형함으로써 딥러닝 모델은 다양한 작업에 유연하게 적용될 수 있다.
*/

/* Machine Learning */

/*
머신러닝( Machine Learning )은 컴퓨터 시스템이 데이터로부터 패턴을 학습하고, 
이를 기반으로 결정을 내리거나 예측을 수행하는 인공 지능 분야이다. 
머신러닝은 명시적으로 프로그래밍하지 않고도 컴퓨터가 데이터에서 학습을 통해 지식을 습득하고 
문제를 해결할 수 있는 능력을 갖게 해준다.

머신러닝의 주요 아이디어는 다음과 같다.
	데이터 기반 학습 : 머신러닝은 대량의 데이터를 분석하고, 데이터에 내재된 패턴을 스스로 학습하여 모델을 개발한다. 
		=> 이를 통해 모델은 데이터로부터 추출한 정보를 사용하여 예측, 분류, 클러스터링 등 다양한 작업을 수행할 수 있다.
	자동화된 패턴 발견 : 머신러닝은 컴퓨터가 데이터에서 통계적 패턴이나 의미 있는 정보를 자동으로 발견하도록 돕는다. 
		=> 이를 통해 복잡한 문제를 해결하거나 유용한 통찰력을 얻을 수 있다.
	모델의 일반화 : 머신러닝 모델은 학습 데이터에서 배운 패턴을 새로운 데이터에 일반화하여 적용할 수 있다.
		=> 이는 학습 데이터에 없는 새로운 상황에서도 모델이 유용하게 동작할 수 있음을 의미한다.
	반복적인 학습과 개선 : 머신러닝 모델은 초기에는 일정한 수준의 성능을 보이지만, 
		=> 추가적인 데이터와 반복적인 학습을 통해 점차적으로 성능을 향상시킬 수 있다.

머신러닝은 지능적인 결정과 예측을 자동화하고, 복잡한 문제를 다룰 수 있는 도구로서 널리 활용되며, 
의료, 금융, 이미지 처리, 자연어 처리 등 다양한 분야에서 혁신적인 응용이 이루어지고 있다.
*/

// 2차원 공간에 리니어 클래시파이어로 구분하기 어려운 Data 들이 있다고 가정하면
//	=> 리니어 클래시파이어를 아무리 조합해 보아도 2차원 공간에서는 선 밖에 그릴 수 없다.
//	=> 이를 해결하기 위해 각각의 구분에 non-Linear한 특성을 넣어 주는 것이다.
//		=> 뉴련에 꺼젔다, 켜젔다 하는 함수를 넣어 주어 꺼진 상태와 켜진 상태를 구분 가능하게 해준다.
// tensorflow playground : 뉴럴 네트워크를 가지고 이것저것 실험을 할 수 있는 사이트
//		=> 2차원 공간에 가운데 밀집한 Data 집합 + 그 Data 집합을 감싸는 Data 집합이 있다.
//		=> Activation-Linear 함수를 가지고 클래시파이어를 만든다고 하면 그 모델의 복잡함이랑 상관 없이 구분이 불가능 하다.
//		=> 하지만 각각의 뉴런들에 Activation-ReLU 함수를 넣는다면 하나의 HIDDEN LAYER, 4개의 뉴런 만으로도 구분이 가능하다.