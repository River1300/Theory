//#include <iostream>
//
//struct Animal
//{
//	char name[30];
//	int age;
//
//	int health;
//	int food;
//	int clean;
//};
//void Play(Animal& a)
//{
//	std::cout << a.age;
//}
//class Cat
//{
//public:
//	void Play() { std::cout << "Dog"; }
//};
//int main()
//{
//	Animal cat{ "Nabi", 2, 10,10,10 };
//	Play(cat);
//	Cat dog;
//	dog.Play();
//}

/*
결과적으로 객체는 다음과 같이 정의된다.

객체란, 변수들과 참고 자료들로 이루어진 소프트웨어 덩어리다.
이 때 객체가 현실 세계에서의 존재하는 것들을 나타내기 위해서는
추상화( abstraction )라는 과정이 필요하다.
컴퓨터 상에서 현실 세계를 100% 나타낼 수 없는 것이기 때문에,
적절하게 컴퓨터에서 처리할 수 있도록 바꾸는 것인데,

예를 들어서 핸드폰의 경우 '전화를 한다', '문자를 보낸다' 와 같은 것들은
'핸드폰이 하는 것' 이므로 함수로 추상화시킬 수 있고,

핸드폰의 상태를 나타내는 것들,
예를 들어서 자기 자신의 전화 번호나 배터리 잔량 같은 것은 변수로 추상화시킬 수 있다.

이와 같이 어떠한 객체는 자기 만의 정보를 나타내는 변수들과,
이를 가지고 어떠한 작업을 하는 함수들로 둘러싸고 있다고 보면 된다.

참고로, 이러한 객체의 변수나 함수들을 보통 인스턴스 변수( instance variable )와
인스턴스 메소드( instance method )라고 부르게 되는데,
그냥 알고 있는 변수, 함수와 동일한 것으로 생각하면 된다.

누군가 인스턴스 메소드라고 하면"아 그냥 객체에 정의되어 있는 함수구나"라고 생각하면 된다.
*/

//#include <iostream>
//// 외부에서 어떠한 객체의 인스턴스 변수의 값을 바꾸지 못하고 
//// 오직 객체의 인스턴스 함수를 통해서만 가능하다는 것
//// ( 물론 항상 이렇게 극단적으로 불가능 한 것은 아니고 사실 사용자가 조절할 수 있다 ) 
//// 이를 단순히 코드로 표현한다면, 예컨대 Animal의 food를 바꾼다고 할 때
//class Animal
//{
//private:
//	int food{};
//
//public:
//	void increase_food(int a) { food += a; }
//};
//int main()
//{
//	Animal cat;
//	cat.food += 100;
//	cat.increase_food(100);
//// 이렇게 된다는 것
//// 일단 animal.food += 100; 자체는 외부에서 animal이라는 '객체'의 '인스턴스 변수'에
//// '직접'접근하는 것이기 때문에 불가능한 것이고, 
//// 아래의 animal.increase_food(100); 의 경우 animal객체의 '인스턴스 함수'를 통해서 
//// 값을 수정하는 것이기 때문에 가능한 것
//// 이와 같이 외부에서 직접 인스턴스 변수의 값을 바꿀 수 없고 
//// 항상 인스턴스 메소드를 통해서 간접적으로 조절하는 것을 
//// 캡슐화( Encapsulation )라고 부른다.
//}