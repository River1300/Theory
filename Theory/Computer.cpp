/* ----- < 컴퓨터 기초 > ----- */

/* 최초의 컴퓨터 */

// 스위치의 집합 on / off : 물리적인 스위치를 전기 신호로 바꿔 꺼져 있는 상태를 0, 켜저 있는 상태를 1로 표현하는 간단한 기계
//							=> 0 과 1 로만 이뤄진 이진법 숫자

/* 기술의 발전 */

// On / Off 를 담당하는									진공관( Vaccum-Tube )
// 진공관의 1 / 220의 초소형으로 ENIAC을 만들 수 있는	트랜지스터( Transistor )
// 트랜지스터 10만개를 쌓아서 만든						집적회로( IC )

/* ----- < CPU > ----- */

// Central Processing Unit( 중앙 처리 장치 ) : 연산 + 제어 + 기억
//												=> 연산 : ALU( Arithmetic Logic Unit ) 연산과 비교, 판단을 담당
//												=> 제어 : Control Unit 명령어 해석, 실행을 위해 CPU 내부의 회로 흐름을 관리
//												=> 기억 : Register Set 처리할 명령어를 저장

// CPU 성능
// 초당 행할 수 있는		연산 싸이클( Hz로 표기 )
// 한 번에 처리할 수 있는	명령 크기( Bit로 표기 )

// CPU는 레지스터( Register )라는 고속 저장 장소를 가지고 있는데, 흔히 RAM이라고 불리는 메모리가 아닌 CPU 내부에 있는 저장 장소
// 레지스터들을 사용하여 연산 및 제어를 하는데, 이 레지스터의 크기에 따라 8비트 / 16비트 / 32비트 컴퓨터냐 하는 단위가 정해짐
//		=> 이러한 레지스터가 표현할 수 있는 값의 범위를 워드라 부름
//		=> 워드는 레지스터의 크기로 CPU가 1 사이클에 처리할 수 있는 비트의 수를 나타냄

/* ----- < Memory > ----- */

// CPU 의 저장 공간만으로는 부족하여 외부에 추가적으로 저장 공간 메모리( Memory )를 만듬
//		=> ROM( Read Only Memory ) : 고정 기억 장치, 컴퓨터를 구동하기 위한 정보 저장, 전원을 꺼도 사라지지 않음
//		=> RAM( Random Access Memory ) : 임의 접근 기억 장치, 임의의 영역에 접근하여 읽고 쓰기가 가능한 주기억 장치
//										=> 어느 위치에 접근하더라도 동일한 시간이 소여, 전원이 끊어지면 사라짐

/* ----- < 프로그래밍 언어 > ----- */

// 기계어 : 0, 1 들의 묶음
// 어셈블리어( 저수준 언어 ) : 최소한 의미를 가지는 단어들
// 고수준언어 : C 계열, Jave 등

// 컴퓨터가 실행할 수 있게 하려면 결국 [고수준언어] -> [저수준언어] -> [기계어]로 변환 과정을 거쳐야 한다.
//		=> Compiler : 고수준언어를 저수준언어로 변환, Compiler라는 것은 수집/기록을 뜻함
//					=> 내부적으로는 의미 있는 단어들을 모으고 그것들의 연관 관계를 기록해서 저수준언어로 변환
//		=> Link : 외부 정보들을 엮어 주는 과정을 뜻함
//		=> Build : Complie 과 Link 를 하나로 묶어서 Build라 칭함

// High Level Language -- COMPLIE ---> Assembly Language -- LINK + 추가 기능 ---> Application( App.exe )

// 앱의 실행 순서
// App.exe -- Double Click ---> OS -- Load ---> RAM ---> CPU
//	=> RAM : 프로그램의 내용( 명령어들의 집합 )이 등록된다.
//	=> CPU : 명령 집합의 첫번째 명령부터 수행을 시작한다.